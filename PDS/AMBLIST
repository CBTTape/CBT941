/* REXX/370 */
/*

Description:
       AMBLIST interactive interface

Function:
       Invoke AMBLIST interactively to perform an available function
       (LISTIDR, LISTLOAD, LISTOBJ, LISTLPA) and browse output.

Syntax:
       AMBLIST >--+------------------------------+-->
                  +--> LISTIDR dataset(member) --+
                  +--> LISTXRF dataset(member) --+
                  +--> LISTMOD dataset(member) --+
                  +--> LISTOBJ dataset(member) --+
                  +--> LISTLPA ------------------+

Note:
       This code contains inline ISPF elements (panel)

(C) 2006-2021 Gregori Bliznets GregoryTwin@gmail.com

*/
trace off
parse source . . myid . . . . ispf .
if ispf <> 'ISPF'
then do
  say myid' should run under ISPF'
  exit 20
  end
parse upper arg ambparm
if ambparm <> ''
then do
  ambopts = 'LISTIDR LISTXRF LISTMOD LISTOBJ LISTLPA'
  parse var ambparm ambopt "'" ambdsn "(" ambmem ")'"
  ambopts = 'LISTIDR LISTXRF LISTMOD LISTOBJ LISTLPA'
  o = wordpos(ambopt, ambopts)
  if o = 0
  then do
    zedsmsg = 'Invalid parameter 'ambopt
    zedlmsg = 'Invalid parameter 'ambopts', valid are 'ambopts
    address ISPEXEC 'SETMSG MSG(ISRZ001)'
    exit 8
    end
  if o < 5 & ambdsn = ''
  then do
    zedsmsg = 'Parameter is missed'
    zedlmsg = 'Dataset name is missed for 'ambopt
    address ISPEXEC 'SETMSG MSG(ISRZ001)'
    exit 8
    end
  if o < 5 & ambmem = ''
  then do
    zedsmsg = 'Parameter is missed'
    zedlmsg = 'Member name is missed for 'ambopt
    address ISPEXEC 'SETMSG MSG(ISRZ001)'
    exit 8
    end
  ambpri = '100'
  ambsec = '100'
  ambunit = 'TRK'
  ambvol = ''
  end
else do
  rc = loadispf()
  if rc <> 0
  then exit 1
  zmsg = ''
  ambopt = ''
  ambpri = ''
  ambsec = ''
  ambunit = ''
  ambvol = ''
  end
do forever
  if ambparm = ''
  then do
    address ISPEXEC 'DISPLAY PANEL(AMBLIST)'
    if rc > 4
    then leave
    end
  address TSO
  if O <> 5
  then do
    volume = ''
    if ambvol <> ''
    then volume = 'VOLUME('ambvol')'
    call outtrap 'NIL.'
    'FREE FI(SYSLIB)'
    call outtrap 'OFF'
    call outtrap 'TSO.'
    "ALLOC FI(SYSLIB) SHR DA('"ambdsn"') "volume
    cc = rc
    call outtrap 'OFF'
    if rc <> 0
    then do
      if ambparm = ''
      then do
        zedsmsg = 'ALLOCATE rc='cc
        zedlmsg = tso.1
        address ISPEXEC 'SETMSG MSG(ISRZ001)'
        exit 8
        end
      else do
        zmsg = tso.1
        iterate
        end
      end
    end
  zmsg = ''
  call outtrap 'NIL.'
  'FREE FI(SYSIN SYSPRINT)'
  call outtrap 'OFF'
  'ALLOC FI(SYSIN) UNIT(VIO) SP(1,1) TRACK RECFM(F) LRECL(80) BLKSIZE(80)'
  if ambunit = 'TRK'
  then ambunit = 'TRACK'
  if ambunit = 'CYL'
  then ambunit = 'CYLINDER'
  'ALLOC FI(SYSPRINT) UNIT(VIO) SP('ambpri','ambsec') 'ambunit,
        'RECFM(F) LRECL(121) BLKSIZE(5687)'
  stmt.0 = 1
  select
  when O = 1
  then stmt.1 = ' LISTIDR MEMBER='ambmem
  when O = 2
  then stmt.1 = ' LISTLOAD OUTPUT=XREF,MEMBER='ambmem
  when O = 3
  then stmt.1 = ' LISTLOAD MEMBER='ambmem
  when O = 4
  then stmt.1 = ' LISTOBJ MEMBER='ambmem
  when O = 5
  then stmt.1 = ' LISTLPA'
  end
  'EXECIO 1 DISKW SYSIN (STEM STMT. FINIS'
  call outtrap 'OFF'
  call outtrap 'TSO.'
  'CALL *(AMBLIST)'
  cc = rc
  call outtrap 'OFF'
  if cc < 0
  then do /* It really mean abend, like S213 on open SYSLIB */
    if ambparm <> ''
    then do
      zedsmsg = 'AMBLIST failed 'd2x(abs(cc))
      zedlmsg = 'AMBLIST failed with system completion code 'd2x(abs(cc))
      address ISPEXEC 'SETMSG MSG(ISRZ001)'
      exit 8
      end
    else do
      zmsg = 'AMBLIST failed with system completion code 'd2x(abs(cc))
      iterate
      end
    end
  address ISPEXEC
  'LMINIT DATAID(AMBROWSE) DDNAME(SYSPRINT)'
  'BROWSE DATAID('AMBROWSE')'
  'LMFREE DATAID('AMBROWSE')'
  if ambparm <> ''
  then leave
end
address TSO
call outtrap 'NIL.'
'FREE FI(SYSLIB SYSIN SYSPRINT)'
'ALLOC FI(SYSPRINT) DA(*)'
if ambparm = ''
then rc = quitispf()
call outtrap 'OFF'
exit

/* Load ISPF elements that are inline in the REXX source code */
LoadISPF:
  dataid = ''
  address TSO
  call outtrap 'NIL.'
  'FREE FI($$ISPF$$)'
  'ALLOC FI($$ISPF$$) UNIT(VIO) SPACE(5,5) DIR(1)' ,
    'LRECL(80) RECFM(F B) BLKSIZE(0)'
  call outtrap 'OFF'
  address ISPEXEC
  'CONTROL ERRORS RETURN'
  'LMINIT DATAID(DATAID) DDNAME($$ISPF$$)'
  'LMOPEN DATAID('dataid') OPTION(OUTPUT)'
  keys = 'START PANEL MSG SKEL END'
  drop data.
  data.0 = 0
  found = 0
  do i = sourceline() to 1 by -1
    s = sourceline(i)
    parse upper var s 1 ?? +2 keyword name .
    select
    when ?? = './'
    then do
      n = wordpos(keyword, keys)
      select
      when n = 0
      then signal quit /* unknown marker */
      when n = 1
      then leave i /* top marker */
      when n = words(keys)
      then found = 1 /* bottom marker */
      otherwise /* marker found */
        if name = ''
        then signal quit /* Name is missed */
        if data.0 = 0
        then iterate i /* empty element */
        do n = data.0 to 1 by -1
          s = data.n
          'LMPUT DATAID('dataid') MODE(INVAR) DATALOC(S) DATALEN(80)'
        end n
        'LMMADD DATAID('dataid') MEMBER('name')'
        drop data.
        data.0 = 0
      end
      end
    when found = 0
    then iterate i
    otherwise /* data element */
      n = data.0+1
      data.n = s
      data.0 = n
    end
  end i
  'LMCLOSE DATAID('dataid')'
  'LMFREE DATAID('dataid')'
  'LIBDEF ISPPLIB LIBRARY ID($$ISPF$$) STACK'
  'LIBDEF ISPMLIB LIBRARY ID($$ISPF$$) STACK'
  'LIBDEF ISPSLIB LIBRARY ID($$ISPF$$) STACK'
  return 0

QuitISPF:
  address ISPEXEC
  'CONTROL ERRORS RETURN'
  if dataid <> ''
  then do
    'LMCLOSE DATAID('dataid')'
    'LMFREE DATAID('dataid')'
     end
  'LIBDEF ISPPLIB'
  'LIBDEF ISPMLIB'
  'LIBDEF ISPSLIB'
  address TSO 'FREE FI($$ISPF$$)'
  return 0

/* Inline ISPF elements follow:
./START
./PANEL AMBLIST
)ATTR
  @ TYPE(AB)
  % TYPE(ABSL)   GE(ON)
  \ TYPE(PS)
  ~ TYPE(NT)
  * TYPE(TEXT)   INTENS(LOW)  COLOR(TURQUOISE)
  + TYPE(TEXT)   INTENS(LOW)  COLOR(GREEN)
  _ TYPE(INPUT)  INTENS(HIGH) COLOR(WHITE) JUST(LEFT)
  ¬ TYPE(OUTPUT) INTENS(HIGH) COLOR(YELLOW) JUST(LEFT) CAPS(OFF)
)ABC DESC('Menu') MNEM(1)
PDC DESC('Settings') UNAVAIL(ZPM1) MNEM(1) ACC(CTRL+S)
 ACTION RUN(ISRROUTE) PARM('SET')
PDC DESC('View') UNAVAIL(ZPM2) MNEM(1) ACC(CTRL+V)
 ACTION RUN(ISRROUTE) PARM('BR1')
PDC DESC('Edit') UNAVAIL(ZPM3) MNEM(1) ACC(CTRL+E)
 ACTION RUN(ISRROUTE) PARM('ED1')
PDC DESC('ISPF Command Shell') UNAVAIL(ZPM4) MNEM(6) ACC(CTRL+C)
 ACTION RUN(ISRROUTE) PARM('C1')
PDC DESC('Dialog Test...') UNAVAIL(ZPM5) MNEM(8) ACC(CTRL+T)
 ACTION RUN(ISRROUTE) PARM('DAL')
PDC DESC('Other IBM Products...') UNAVAIL(ZPM6) MNEM(1) ACC(CTRL+O)
 ACTION RUN(ISRROUTE) PARM('OIB')
PDC DESC('SCLM') UNAVAIL(ZPM7) MNEM(3) ACC(CTRL+L)
 ACTION RUN(ISRROUTE) PARM('SCL')
PDC DESC('ISPF Workplace') UNAVAIL(ZPM8) MNEM(6) ACC(CTRL+W)
 ACTION RUN(ISRROUTE) PARM('WRK')
PDC DESC('Status Area...') UNAVAIL(ZPMS) MNEM(8) ACC(CTRL+A)
 ACTION RUN(ISRROUTE) PARM('SAM')
PDC DESC('Exit') MNEM(2) PDSEP(ON) ACC(CTRL+X) ACTION RUN(EXIT)
)ABCINIT
.ZVARS=ISR@OPT
)ABC DESC('Utilities') MNEM(1)
PDC DESC('Library') UNAVAIL(ZUT1) MNEM(1) ACC(ALT+1)
 ACTION RUN(ISRROUTE) PARM('U1')
PDC DESC('Data set') UNAVAIL(ZUT2) MNEM(1) ACC(ALT+2)
 ACTION RUN(ISRROUTE) PARM('U2')
PDC DESC('Move/Copy') UNAVAIL(ZUT3) MNEM(1) ACC(ALT+3)
 ACTION RUN(ISRROUTE) PARM('U3')
PDC DESC('Data Set List') UNAVAIL(ZUT4) MNEM(2) ACC(ALT+4)
 ACTION RUN(ISRROUTE) PARM('U4')
PDC DESC('Reset Statistics') UNAVAIL(ZUT5) MNEM(5) ACC(ALT+5)
 ACTION RUN(ISRROUTE) PARM('U5')
PDC DESC('Hardcopy') UNAVAIL(ZUT6) MNEM(1) ACC(ALT+6)
 ACTION RUN(ISRROUTE) PARM('U6')
PDC DESC('Download...') UNAVAIL(ZUTDT) MNEM(2) ACC(ALT+7)
 ACTION RUN(ISRROUTE) PARM('UDT')
PDC DESC('Outlist') UNAVAIL(ZUT7) MNEM(2) ACC(ALT+8)
 ACTION RUN(ISRROUTE) PARM('U8')
PDC DESC('Commands...') UNAVAIL(ZUT8) MNEM(1) ACC(ALT+9)
 ACTION RUN(ISRROUTE) PARM('U9')
PDC DESC('Reserved') UNAVAIL(ZUT9) MNEM(6) ACTION RUN(ISRROUTE) PARM('U10')
PDC DESC('Format') UNAVAIL(ZUT10) MNEM(1) ACC(ALT+F1)
 ACTION RUN(ISRROUTE) PARM('U11')
PDC DESC('SuperC') UNAVAIL(ZUT11) MNEM(1) PDSEP(ON) ACC(CTRL+F2)
 ACTION RUN(ISRROUTE) PARM('U12')
PDC DESC('SuperCE') UNAVAIL(ZUT12) MNEM(3) ACC(CTRL+F3)
 ACTION RUN(ISRROUTE) PARM('U13')
PDC DESC('Search-For') UNAVAIL(ZUT13) MNEM(2) ACC(CTRL+F4)
 ACTION RUN(ISRROUTE) PARM('U14')
PDC DESC('Search-ForE') UNAVAIL(ZUT14) MNEM(4) ACC(CTRL+F5)
 ACTION RUN(ISRROUTE) PARM('U15')
PDC DESC('Table Utility') UNAVAIL(ZUT15) MNEM(3) ACC(CTRL+F6)
 ACTION RUN(ISRROUTE) PARM('U16')
PDC DESC('Directory List') UNAVAIL(ZUT16) MNEM(2) ACC(CTRL+F7)
 ACTION RUN(ISRROUTE) PARM('U17')
)ABCINIT
.ZVARS=PDFUTIL
     &zut9 = '1'
)ABC DESC('Compilers') MNEM(1)
PDC DESC('Foreground Compilers') MNEM(1) ACTION RUN(ISRROUTE) PARM('FGD')
PDC DESC('Background Compilers') MNEM(1) ACTION RUN(ISRROUTE) PARM('BKG')
PDC DESC('ISPPREP Panel Utility...') MNEM(1) ACTION RUN(ISPPREP)
PDC DESC('DTL Compiler...') MNEM(1) ACTION RUN(ISPDTLC)
)ABCINIT
.ZVARS=ISRLANG
)ABC DESC('Help') MNEM(1)
PDC DESC('AMBLIST panel') ACTION RUN(ISRROUTE)
 PARM('SELECT PANEL(AMBLISTH)')
PDC DESC('About') MNEM(1) ACTION RUN(ISRROUTE)
 PARM('SELECT PANEL(AMBLISTA) ADDPOP')
)ABCINIT
.ZVARS=AMBLISTH
)BODY EXPAND(//)
~@ Menu@ Utilities@ Compilers@ Help+
%--/-/-------------------------------------------------------------------------
*/ / AMBLIST Utility / /
+Command ===>_ZCMD                                                     +
¬ZMSG                                                                          +
+Option. . . . . . . _O+ 1 LISTIDR (List load module identification records)
+                        2 LISTLOAD XREF (Load module cross-reference)
+                        3 LISTLOAD (Load module map)
+                        4 LISTOBJ (Object module map)
+                        5 LISTLPA (Link Pack Area listing)
+
+Input
+Library . . . . . . _AMBDSN                                      +
+Member. . . . . . . _AMBMEM  +
+Volume serial . . . _AMBVOL+
+
+Output
+Space units . . . . _AMBUNIT +(TRACK, TRK, CYLINDER, CYL)
+Primary quantity. . _AMBPRI+  (In above units)
+Secondary quantity. _AMBSEC+  (In above units)
+
)INIT
 .HELP = 'AMBLISTH'
 &ZPRIM = NO
 .CURSOR = O
 &O = &AMBOPT
 IF (&AMBPRI = &Z)
    &AMBPRI = 50
 IF (&AMBSEC = &Z)
    &AMBSEC = 50
 IF (&AMBUNIT = &Z)
    &AMBUNIT = TRACK
 IF (&O = &Z )
    &O = 1
)PROC
  VER (&O,NONBLANK)
  VER (&O,LIST,1,2,3,4,5)
  IF  (&O NE 5)
    VER (&AMBDSN,NONBLANK)
    VER (&AMBDSN,DSNAME)
    VER (&AMBMEM,NONBLANK)
    VER (&AMBMEM,NAME)
  &AMBOPT = &O
  VER (&AMBUNIT,LIST,CYLINDER,CYL,TRACK,TRK)
  VER (&AMBPRI,NUM)
  VER (&AMBSEC,NUM)
  VPUT (AMBDSN AMBMEM AMBOPT AMBVOL AMBPRI AMBSEC AMBUNIT) PROFILE
)END
./PANEL AMBLISTH
)ATTR
 + TYPE(TEXT) INTENS(LOW)
 % TYPE(TEXT) INTENS(HIGH) COLOR(WHITE)
 _ TYPE(INPUT) INTENS(HIGH) COLOR(WHITE) JUST(LEFT)
 ¬  TYPE(OUTPUT) INTENS(HIGH) CAPS(OFF) COLOR(YELLOW) JUST(LEFT)
)BODY EXPAND (//)
%-/-/ Interactive AMBLIST -/-/
%Command ===>_ZCMD                                                     +
¬ZMSG                                                                          +
+
+Specify AMBLIST option:
+  1 - LISTIDR - list load module identification records
+  2 - LISTLOAD XREF - load module cross-reference
+  3 - LISTLOAD - load module map
+  4 - LISTOBJ - object module map
+  5 - LISTLPA - Link Pack Area listing
+
+For all options except 5 (LISTLPA) full qualified library name without
+quotes and member name must be specified. Volume serial required if
+library is not cataloged (antique systems). Specify space allocation
+for output report if required (need to be increased for large module,
+like IEANUC01 etc.). See "MVS Diagnosis: Tools and Service Aids" manual
+for AMBLIST detail description.
)PROC
 &ZSEL = 1
)END
./PANEL AMBLISTA
)ATTR
 + TYPE(TEXT) INTENS(LOW)
 % TYPE(TEXT) INTENS(HIGH) COLOR(WHITE)
 _ TYPE(INPUT) INTENS(HIGH) COLOR(WHITE) JUST(LEFT)
 ¬  TYPE(OUTPUT) INTENS(HIGH) CAPS(OFF) COLOR(YELLOW) JUST(LEFT)
)BODY EXPAND (//)
%-/-/ About AMBLIST panel -/-/
%Command ===>_ZCMD                                                     +
¬ZMSG                                                                          +
+
+ (C) 2006-2021 Gregori Bliznets GregoryTwin@gmail.com
+
)PROC
 &ZSEL = 1
)END
./END
*/
