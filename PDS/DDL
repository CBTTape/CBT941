/* REXX/370 */
/*

Function:
       Builds a job to allocate data set(s) and VSAM objects definitions
       for an exising data sets and objects.
       This allocation job may be useful to reallocate data set on the
       target system when those transferred via ftp.

Syntax:
       DDL hlq ÝDCB(YES|NO)¨ ÝSMS(YES|NO|ONLY)¨ ÝAMS(ALL|VSAM)¨ ÝDEL(YES|NO)¨
               ÝJOB(YES|NO)¨ ÝSUM(YES|NO)¨ ÝKEEP(YES|NO)¨

(C) 2006-2021 Gregori Bliznets GregoryTwin@gmail.com

*/
trace off
parse source . . myid . . . . ispf .
if ispf <> 'ISPF'
then do
  say myid' should run under ISPF'
  exit 20
  end
address ISPEXEC
'VGET (ZUSER ZENVIR ZAPPLID ZGUI ZTEMPF ZTEMPN BJC1 BJC2 BJC3 BJC4)'
parse var zenvir 17 runmode 25
if zgui <> ''
then runmode = zgui
cc = 0
keys = 'DCB SMS AMS DEL JOB SUM KEEP'
/* Valid values for keys above, 1st uses as default */
vals.1 = 'YES NO'
vals.2 = 'YES NO ONLY'
vals.3 = 'ALL VSAM'
vals.4 = 'YES NO'
vals.5 = 'YES NO'
vals.6 = 'YES NO'
vals.7 = 'YES NO'
/* Set default values */
do i = 1 to words(keys)
  call value word(keys, i), word(vals.i, 1)
end i
'VGET (DDL) PROFILE'
cc = options(ddl)
if cc <> 0
then signal quit
parse upper arg parm1 parms
hlq = ''
if pos('(', parm1) = 0
then hlq = parm1
else parms = parm1' 'parms
cc = options(parms)
if cc <> 0
then signal quit

if hlq = '' & keep = 'YES'
then do
  ddl=''
  do i = 1 to words(keys)
    ddl = ddl word(keys, i)'('value(word(keys, i))')'
  end i
  'VPUT (DDL) PROFILE'
  say '001I DDL options kept'
  signal quit
  end

if left(hlq,1) = "'" & right(hlq,1) = "'"
then hlq = substr(hlq,2,length(hlq)-2)
if hlq = ''
then do
  say '001T HLQ is missed'
  cc = 16
  signal quit
  end
if pos('(', hlq) > 0
then do
  say '002T Invalid HLQ: 'HLQ
  cc = 16
  signal quit
  end
if left(hlq, 1) = '/'
then do
  say '003T Invalid HLQ: 'HLQ
  cc = 16
  signal quit
  end

/* Device constants: z/OS supports 3380, 3390, 9345 only */
devtypes.1  = '3390 0F 15 56664'
devtypes.2  = '3380 0E 15 47476'
devtypes.3  = '3330 0D 19 13030' /* 3330-11, 3333-11 */
devtypes.4  = '3375 0C 12 35616'
devtypes.5  = '3350 0B 30 19069'
devtypes.6  = '3340 0A 12  8368'
devtypes.7  = '3330 09 19 13030' /* 3390-1, 3390-2, 3333 */
devtypes.8  = '2314 08 20  7294'
devtypes.9  = '2305 07  8 14136' /* 2305-2 */
devtypes.10 = '2305 06  8 14136' /* 2305-1 */
devtypes.11 = '2301 05  8 14136'
devtypes.12 = '9345 04 15 46456'
devtypes.13 = '2311 01 10  3625'
devtypes.0 = 13

/* Check if output DD present */
if runmode = 'BATCH'
then do
  ddname = 'DDL'
  found = 0
  numeric digits 20
  CVT = '10'
  TCB = c2d(storage(c2x(storage(c2x(storage(CVT,4)),4)),4))
  TIOT = c2d(storage(d2x(TCB+12),4))
  TIOTPTR = TIOT+24
  TIOELNGH = c2d(storage(d2x(TIOTPTR),1))
  do until TIOELNGH = 0
    TIOEDDNM = strip(storage(d2x(TIOTPTR+4),8))
    if substr(TIOEDDNM,1,1) <> '00'x & TIOEDDNM <> '' & TIOEDDNM = ddname
    then found = 1
    TIOTPTR = TIOTPTR + TIOELNGH
    TIOELNGH = c2d(storage(d2x(TIOTPTR),1))
  end
  if found = 0
  then ddname = ztempn
  end
else ddname = ztempn
'LMDINIT LISTID(listid) LEVEL('hlq')'
if rc <> 0
then do
  say '004T LMDINIT failed, return code 'rc
  cc = 16
  signal quit
  end
dsn = ''
total = 0
dyn = 1000
jcl.0 = 5
/* Stem JCL uses as shown below:

jcl.1   //JOBNAME JOB
        ...
jcl.2   //DELETE  EXEC
        ...
          DELETE
        ...
jcl.3   //ALLOCATE EXEC
        ...
jcl.4     ALLOCATE
        ...
jcl.5   //

This structure allow easily add data to the proper place

*/
do i = 1 to jcl.0
  jcl.i.0 = 0
end i
step = 0
do i = 1 to 4
  if value('BJC'i) <> ''
  then rc = jcl(value('BJC'i))
end i
step = 1
rc = jcl('//DELETE   EXEC PGM=IDCAMS,DYNAMNBR='dyn)
rc = jcl('//SYSPRINT DD SYSOUT=*')
rc = jcl('//SYSIN    DD *')
step = 2
rc = jcl('//ALLOCATE EXEC PGM=IDCAMS,DYNAMNBR='dyn)
rc = jcl('//SYSPRINT DD SYSOUT=*')
do n = 1
  tracks = 0
  zdsdevt = '3390'
  'LMDLIST LISTID('listid') DATASET(DSN) STATS(YES)'
  if rc <> 0
  then leave n
  "DSINFO DATASET('"dsn"')"
  dsirc = rc
  /* In most cases DSINFO give us all we need. However, DSINFO returns error
  (rc 8 and set message "Data set in use") in case of mouted zFS filesystem.
  LISTDSI retrurns rc 4 reason 12 for VSAM data set */
  ldsrc = LISTDSI("'"dsn"'")
  select
  when dsirc = 0
  then nop
  when ldsrc < 8
  then do
    zdsorg = sysdsorg
    end
  otherwise
    say '005W Object 'dsn' not available: 'zerrsm
    rc = jcl('/* ERROR: 'dsn' IS NOT AVAILABLE, DSINFO RC='dsirc' */')
    cc = max(cc, 4)
    iterate n
  end
  call outtrap 'AMS.'
  address TSO "LISTCAT ENTRIES('"dsn"') ALL"
  call outtrap 'OFF'
  parse var ams.1 w1 w2 .
  if rc <> 0
  then do
    say '006W Unknown object 'dsn
    cc = max(cc, 4)
    iterate n
    end

  if zdsorg = 'VS' & hlq = dsn & (w1 = 'INDEX' | w1 = 'DATA')
  then do /* VSAM component specified, handle associated cluster */
    rc = jcl('  /* WARNING: 'w1' COMPONENT SPECIFIED, HANDLE CLUSTER */')
    do i = 1 to ams.0
      parse var ams.i w1 w2 w3 w4 w5 w6 w7 w8 .
      if w1 = 'ASSOCIATIONS'
      then leave i
    end i
    i = i+1
    if i > ams.0
    then do
      say '006W Unknown object 'dsn
      cc = max(cc, 8)
      iterate n
      end
    parse var ams.i w1 w2 w3 w4 w5 w6 w7 w8 .
    if left(w1,9) = 'CLUSTER--'
    then dsn = substr(w1,10)
    else do
      say '006W Unknown object 'dsn
      cc = max(cc, 8)
      iterate n
      end
    drop ams.
    call outtrap 'AMS.'
    address TSO "LISTCAT ENTRIES('"dsn"') ALL"
    call outtrap 'OFF'
    parse var ams.1 w1 w2 .
    if rc <> 0
    then do
      say '004W Unknown object 'dsn
      cc = max(cc, 8)
      iterate n
      end
    end

  select
  when w1' 'w2 = 'GDG BASE'
  then do
    parse var ams.7 w1 w2 w3 .
    limit = word(translate(w1,' ','-'),2)
    rc = jcl('  DELETE 'dsn' GENERATIONDATAGROUP')
    rc = jcl('  DEFINE -')
    rc = jcl('   GENERATIONDATAGROUP -')
    rc = jcl('    NAME('dsn') -')
    rc = jcl('    LIMIT('limit') -')
    rc = jcl('    'w2' -')
    rc = jcl('    'w3' -')
    rc = jcl('    ) ')
    end
  when w1 = 'ALIAS'
  then do
    parse var ams.6 w1 w2 w3 .
    relate = word(translate(w1,' ','-'),2)
    rc = jcl('  DELETE 'dsn' ALIAS')
    rc = jcl('  DEFINE -')
    rc = jcl('   ALIAS -')
    rc = jcl('    NAME('dsn') -')
    rc = jcl('    RELATE('relate') -')
    rc = jcl('    ) ')
    end
  when zdsorg = 'VS'
  then do /* VSAM */
    select
    when w1 = 'CLUSTER'
    then object = w1
    when w1 = 'INDEX'
    then iterate n
    when w1 = 'DATA'
    then iterate n
    when w1 = 'AIX'
    then object = w1
    when w1 = 'PATH'
    then object = w1
    when w1 = 'PAGESPACE'
    then object = w1
    otherwise nop
    end
    dname = ''
    iname = ''
    dtracks = 0
    itracks = 0
    dunit = ''
    iunit = ''
    quote = "'"
    storclas = ''
    mgmtclas = ''
    dataclas = ''
    do i = 1 to ams.0
      parse var ams.i w1 w2 w3 w4 w5 w6 w7 w8 .
      select
      when w1 = 'DATA' & w2 = '-------'
      then dname = w3
      when w1 = 'INDEX' & w2 = '------'
      then iname = w3
      when left(w1,8) = 'KEYLEN--' & iname = ''
      then do
        keylen = word(translate(w1,' ','-'),2)
        avglrecl = word(translate(w2,' ','-'),2)
        end
      when left(w1,5) = 'RKP--' & iname = ''
      then do
        rkp = word(translate(w1,' ','-'),2)
        maxlrecl = word(translate(w2,' ','-'),2)
        end
      when left(w1,8) = 'SHROPTNS' & iname = ''
      then do
        parse var w1 . '(' shropt ')' .
        amorg = w5 /* INDEXED NONINDEXED NUMBERED LINEAR */
        k = i+1
        parse var ams.k w10 w11 .
        if object = 'CLUSTER'
        then amattr = w4 w6 w8 w10 /* ÝNO¨ERASE ÝNO¨WRITECHK ÝNO¨REUSE */
        if object = 'AIX'
        then amattr = w4 w6 w8 w11 /* ÝNO¨ERASE ÝNO¨WRITECHK ÝNON¨UNIQKEY */
        if object = 'PAGESPACE'
        then amattr = ''
        end
      when w1 = 'STORAGECLASS '
      then do
        storclas = strip(translate(w2,' ','-'))
        mgmtclas = word(translate(w3,' ','-'),2)
        end
      when w1 = 'DATACLASS '
      then do
        dataclas = strip(translate(w2,' ','-'))
        end
      when left(w1,12) = 'SPACE-TYPE--'
      then do
        if iname <> ''
        then isptype = word(translate(w1,' ','-'),3)
        else dsptype = word(translate(w1,' ','-'),3)
        end
      when left(w1,11) = 'SPACE-PRI--'
      then do
        if iname <> ''
        then isppri = word(translate(w1,' ','-'),3)
        else dsppri = word(translate(w1,' ','-'),3)
        end
      when left(w1,11) = 'SPACE-SEC--'
      then do
        if iname <> ''
        then ispsec = word(translate(w1,' ','-'),3)
        else dspsec = word(translate(w1,' ','-'),3)
        end
      when left(w1,13) = 'LOW-CCHH-----'
      then do
        parse var ams.i . (quote) +1 lowcc +4 lowhh (quote) .
        k = i+1
        parse var ams.k . (quote) +1 highcc +4 highhh (quote) .
        tracks = (x2d(highcc)-x2d(lowcc))*trkpercyl+(x2d(highhh)-x2d(lowhh))+1
        if iname <> ''
        then itracks = itracks+tracks
        else dtracks = dtracks+tracks
        end
      when left(w1,18) = 'VOLSER------------'
      then do
        if iname <> ''
        then ivolser = word(translate(w1,' ','-'),2)
        else dvolser = word(translate(w1,' ','-'),2)
        end
      when left(w1,13) = 'DEVTYPE------'
      then do
        parse var ams.i . (quote) +1 ucbtyp (quote) .
        parse var ucbtyp ucbtbyt1 +1 ucbtbyt2 +1 ucbtbyt3 +1 ucbtbyt4 +1
        found = 0
        do k = 1 to devtypes.0
          parse var devtypes.k name type trkpercyl bytepertrk
          if '20'type == ucbtbyt3''ucbtbyt4
          then do
            found = 1
            leave k
            end
        end k
        if found = 0 /* assume 3390 when not found */
        then parse var devtypes.1 name type trkpercyl bytepertrk
        if iname <> ''
        then iunit = name
        else dunit = name
        end
      when left(w1,13) = 'REC-INSERTED-'
      then freeci = word(translate(w2,' ','-'),3)
      when left(w1,13) = 'REC-UPDATED--'
      then freeca = word(translate(w2,' ','-'),3)
      when left(w1,13) = 'RELEASE------'
      then expire = substr(w2,17,4) || substr(w2,22,3)
      when object = 'AIX' & left(w1,9) = 'CLUSTER--'
      then relate = word(translate(w1,' ','-'),2)
      when object = 'AIX' & left(w1,7) = 'UPGRADE'
      then upgrade = w1
      when object = 'AIX' & left(w1,7) = 'NOUPGRADE'
      then upgrade = w1
      when object = 'AIX' & left(w1,7) = 'AXRKP--'
      then axrkp = word(translate(w1,' ','-'),2)
      when object = 'PATH' & left(w1,9) = 'AIX------'
      then pathentry = word(translate(w1,' ','-'),2)
      when object = 'PATH' & left(w1,9) = 'CLUSTER--'
      then pathentry = word(translate(w1,' ','-'),2)
      when object = 'PATH' & left(w1,7) = 'UPDATE'
      then update = w1
      when object = 'PATH' & left(w1,7) = 'NOUPDATE'
      then update = w1
      otherwise nop
      end
    end i
    tracks = itracks+dtracks
    select
    when object = 'PATH'
    then do
      rc = jcl('  DELETE 'dsn' PATH')
      rc = jcl('  DEFINE -')
      rc = jcl('   PATH( -')
      rc = jcl('    NAME('dsn') -')
      rc = jcl('    PATHENTRY('pathentry') -')
      rc = jcl('    'update' -')
      rc = jcl('    ) ')
      end
    when object = 'AIX'
    then do
      rc = jcl('  DELETE 'dsn' AIX')
      rc = jcl('  DEFINE -')
      rc = jcl('   AIX( -')
      rc = jcl('    NAME('dsn') -')
      rc = jcl('    RELATE('relate') -')
      rc = jcl('    'upgrade' -')
      do while amattr <> ''
        parse var amattr w1 amattr
        p = wordpos(w1, 'NOWRITECHK WRITECHK NONUNIQKEY UNIQKEY')
        if p > 0
        then w1 = word('NOWRITECHECK WRITECHECK NONUNIQUEKEY UNIQUEKEY', p)
        rc = jcl('    'w1' -')
      end
      rc = jcl('    KEYS('keylen' 'axrkp') -')
      rc = jcl('    RECORDSIZE('avglrecl' 'maxlrecl') -')
      if freeci+freeca <> 0
      then rc = jcl('    FREESPACE('freeci' 'freeca') -')
      rc = jcl('    SHAREOPTIONS('shropt') -')
      rc = jcl('    ) -')
      rc = jcl('   DATA ( -')
      rc = jcl('    NAME('dname') -')
      rc = jcl('    'dsptype'('dsppri' 'dspsec') -')
      rc = jcl('    ) -')
      rc = jcl('   INDEX ( -')
      rc = jcl('    NAME('iname') -')
      rc = jcl('    'isptype'('isppri' 'ispsec') -')
      rc = jcl('    ) ')
      /* Allocation summary */
      rc = jcl('  /* 'tracks' 'strip(zdsdevt)' TRACK(S) ALLOCATED */')
      end
    when object = 'CLUSTER'
    then do
      purge = ''
      if expire <> '0000000'
      then purge = 'PURGE'
      rc = jcl('  DELETE 'dsn' CLUSTER 'purge)
      rc = jcl('  DEFINE -')
      rc = jcl('   CLUSTER( -')
      rc = jcl('    NAME('dsn') -')
      rc = jcl('    'amorg' -')
      do while amattr <> ''
        parse var amattr w1 amattr
        p = wordpos(w1, 'NOWRITECHK WRITECHK NONUNIQKEY UNIQKEY')
        if p > 0
        then w1 = word('NOWRITECHECK WRITECHECK NONUNIQUEKEY UNIQUEKEY', p)
        rc = jcl('    'w1' -')
      end
      if expire <> '0000000'
      then rc = jcl('    TO('expire') -')
      if amorg = 'INDEXED'
      then rc = jcl('    KEYS('keylen' 'rkp') -')
      if amorg <> 'LINEAR'
      then rc = jcl('    RECORDSIZE('avglrecl' 'maxlrecl') -')
      if freeci+freeca <> 0
      then rc = jcl('    FREESPACE('freeci' 'freeca') -')
      if sms <> 'NO'
      then do
        if storclas <> '(NULL)' & storclas <> ''
        then rc = jcl('    STORAGECLASS('storclas') -')
        if mgmtclas <> '(NULL)' & mgmtclas <> ''
        then rc = jcl('    MANAGEMENTCLASS('mgmtclas') -')
        if dataclas <> '(NULL)' & dataclas <> ''
        then rc = jcl('    DATACLASS('dataclas') -')
        end
      rc = jcl('    SHAREOPTIONS('shropt') -')
      rc = jcl('    ) -')
      rc = jcl('   DATA ( -')
      rc = jcl('    NAME('dname') -')
      rc = jcl('    'dsptype'S('dsppri' 'dspsec') -')
      if sms <> 'ONLY'
      then rc = jcl('    VOLUMES('strip(dvolser)') -')
      if amorg = 'INDEXED'
      then do
        rc = jcl('    ) -')
        rc = jcl('   INDEX ( -')
        rc = jcl('    NAME('iname') -')
        rc = jcl('    'isptype'S('isppri' 'ispsec') -')
        if sms <> 'ONLY'
        then rc = jcl('    VOLUMES('strip(ivolser)') -')
        end
      rc = jcl('    ) ')
      if sum = 'YES' /* Allocation summary */
      then rc = jcl('  /* 'tracks' 'strip(zdsdevt)' TRACK(S) ALLOCATED */')
      end
    when object = 'PAGESPACE'
    then do
      rc = jcl('  DELETE 'dsn' PAGESPACE')
      rc = jcl('  DEFINE -')
      rc = jcl('   PAGESPACE( -')
      rc = jcl('    NAME('dsn') -')
      rc = jcl('    'dsptype'S('dsppri' 'dspsec') -')
      if expire <> '0000000'
      then rc = jcl('    TO('expire') -')
      if sms <> 'NO'
      then do
        if storclas <> '(NULL)' & storclas <> ''
        then rc = jcl('    STORAGECLASS('storclas') -')
        if mgmtclas <> '(NULL)' & mgmtclas <> ''
        then rc = jcl('    MANAGEMENTCLASS('mgmtclas') -')
        if dataclas <> '(NULL)' & dataclas <> ''
        then rc = jcl('    DATACLASS('dataclas') -')
        end
      else rc = jcl('    VOLUME('strip(dvolser)') -')
      rc = jcl('    ) ')
      if sum = 'YES' /* Allocation summary */
      then rc = jcl('  /* 'tracks' 'strip(zdsdevt)' TRACK(S) ALLOCATED */')
      end
    end
    end
  otherwise /* NONVSAM */
    space = space(translate(zdstota,' ',','),0)
    found = 0
    do k = 1 to devtypes.0
      parse var devtypes.k name type trkpercyl bytepertrk
      if zdsdevt = name
      then do
        found = 1
        leave k
        end
    end k
    if found = 0 /* assume 3390 is not found */
    then parse var devtypes.1 name type trkpercyl bytepertrk
    if ams = 'ALL'
    then do
      rc = jcl('  ALLOCATE -')
      rc = jcl("   DSNAME('"dsn"') -")
      end
    else do
      rc = jcl('//DD'right(n,6,'0')' DD DSN='dsn',')
      rc = jcl('//            DISP=(NEW,CATLG),')
      end
    expdt = ''
    if zdsxdate <> '***None***'
    then parse var sysexdate yyyy '/' ddd
    purge = ''
    if expdt <> ''
    then purge = 'PURGE'
    rc = jcl('  DELETE 'dsn' NONVSAM 'purge)
    /* Calculate request in tracks */
    select
    when zdsspc = 'CYLINDER'
    then tracks = space*trkpercyl
    when zdsspc = 'TRACK'
    then tracks = space
    when zdsspc = 'BLOCK'
    then tracks = format(zdsblk*space/bytepertrk,,0)
    when zdsspc = 'BYTE'
    then tracks = format(space/bytepertrk,,0)
    when zdsspc = 'KILOBYTE'
    then tracks = format(space*1024/bytepertrk,,0)
    when zdsspc = 'MEGABYTE'
    then tracks = format(space*1024*1024/bytepertrk,,0)
    end
    if ams = 'ALL'
    then do
      select
      when zdsspc = 'CYLINDER'
      then rc = jcl('   CYLINDERS -')
      when zdsspc = 'TRACK'
      then rc = jcl('   TRACKS -')
      when zdsspc = 'BLOCK'
      then rc = jcl('   BLOCK('strip(zdsblk)') -')
      when zdsspc = 'BYTE'
      then rc = jcl('   BLOCK('strip(zdsblk)') AVGREC(U) -')
      when zdsspc = 'KILOBYTE'
      then rc = jcl('   BLOCK('strip(zdsblk)') AVGREC(K) -')
      when zdsspc = 'MEGABYTE'
      then rc = jcl('   BLOCK('strip(zdsblk)') AVGREC(M) -')
      end
      dsppri = strip(zds1ex)
      dspsec = strip(zds2ex)
      if zdsspc = 'BYTE'
      then do
        dsppri = format(dsppri/bytepertrk,,0)
        dspsec = format(dspsec/bytepertrk,,0)
        end
      rc = jcl('   SPACE('dsppri' 'dspsec') -')
      if zdsorg = 'PO'
      then rc = jcl('   DIR('strip(zdsdira)') -')
      if zdsdsnt = 'HFS' | zdsdsnt = 'LIBRARY'
      then rc = jcl('   DSNTYPE('strip(zdsdsnt)') -')
      if expdt <> ''
      then rc = jcl('   EXPDT('expdt') -')
      end
    else do
      select
      when zdsspc = 'CYLINDER'
      then space = 'CYL'
      when zdsspc = 'TRACK'
      then space = 'TRK'
      otherwise
        space = strip(zdsblk)
      end
      select
      when zdsspc = 'BYTE'
      then avgrec = 'AVGREC(U),'
      when zdsspc = 'KIILOBYTE'
      then avgrec = 'AVGREC(K),'
      when zdsspc = 'MEGABYTE'
      then avgrec = 'AVGREC(M),'
      otherwise
        avgrec = ''
      end
      dsppri = strip(zds1ex)
      dspsec = strip(zds2ex)
      if zdsorg = 'PO'
      then space = space',('dsppri','dspsec','strip(zdsdira)')'
      else space = space',('dsppri','dspsec')'
      rc = jcl('//            SPACE=('space'),'avgrec)
      if zdsdsnt = 'HFS' | zdsdsnt = 'LIBRARY'
      then rc = jcl('//            DSNTYPE='strip(zdsdsnt)',')
      if expdt <> ''
      then rc = jcl('//            DCB=EXPDT='expdt',')
      end
    if dcb = 'YES'
    then do
      recfm = ''
      do i = 1 to length(zdlrecfm)
        recfm=recfm' 'substr(zdlrecfm,i,1)
      end i
      if ams = 'ALL'
      then do
        rc = jcl('   DSORG('strip(zdsorg)') -')
        rc = jcl('   RECFM('strip(recfm)') -')
        rc = jcl('   LRECL('strip(zdslrec)') -')
        rc = jcl('   BLKSIZE('strip(zdsblk)') -')
        end
      else do
        rc = jcl('//            DSORG='strip(zdsorg)',')
        rc = jcl('//            RECFM='strip(zdlrecfm)',')
        rc = jcl('//            LRECL='strip(zdslrec)',')
        rc = jcl('//            BLKSIZE='strip(zdsblk)',')
        end
      end
    if sms <> 'NO'
    then do
      smsattr = ''
      if zdsmc <> '**None**'
      then smsattr = smsattr' MGMTCLAS('strip(zdsmc)')'
      if zdssc <> '**None**'
      then smsattr = smsattr' STORCLAS('strip(zdssc)')'
      if zdsdc <> '**None**'
      then smsattr = smsattr' DATACLAS('strip(zdsdc)')'
      do k = 1 to words(smsattr)
        c = ''
        if k < words(smsattr) | sms = 'YES'
        then c = '-'
        if ams = 'ALL'
        then rc = jcl('   'word(smsattr,k)' 'c)
        else rc = jcl('//            'word(smsattr,k)''c)
      end k
      end
    if sms <> 'ONLY'
    then do
      if ams = 'ALL'
      then rc = jcl('   UNIT('strip(zdsdevt)') -')
      else rc = jcl('//            UNIT='strip(zdsdevt)',')
      if zds#vols = 1
      then volser = strip(zdsvol)
      else volser = strip(zdsvtab)
      if ams = 'ALL'
      then rc = jcl('   VOLUME('volser') ')
      else rc = jcl('//            VOL=SER='volser' ')
      end
    if zdsapf = 'YES'
    then do
      if ams = 'ALL'
      then rc = jcl('  /* APF-authorized data set */')
      else rc = jcl('//* APF-authorized data set ***')
      end
    if sum = 'YES'
    then do /* Allocation summary */
      if ams = 'ALL'
      then rc = jcl('  /* 'tracks' 'strip(zdsdevt)' TRACK(S) ALLOCATED */')
      else rc = jcl('//* 'tracks' 'strip(zdsdevt)' TRACK(S) ALLOCATED ***')
      end
  end
  if datatype(tracks,'W')
  then total = total + tracks
end n
rc = jcl('//SYSIN    DD *')
if sum = 'YES'
then rc = jcl('  /* TOTAL 'total' 'strip(zdsdevt)' TRACK(S) ALLOCATED */')
step = 1
rc = jcl('  SET MAXCC = 0')
step = 2
rc = jcl('//')
if job = 'NO'
then jcl.1.0 = 0
if del = 'NO'
then jcl.2.0 = 0
do i = 1 to jcl.0
  if jcl.i.0 > 0
  then address TSO 'EXECIO 'jcl.i.0' DISKW 'ddname' (STEM JCL.'i'.'
end i
address TSO 'EXECIO 0 DISKW 'ddname' (FINIS'
'LMDFREE LISTID('listid')'
if runmode <> 'BATCH'
then "EDIT DATASET('"ztempf"')"

quit:
  zispfrc = cc
  address ISPEXEC 'VPUT ZISPFRC'
  exit cc

options:
  parse arg opts
  do while opts <> ''
    parse var opts opt opts
    parse var opt key '(' val ')'
    found = 0
    do i = 1 to words(keys) while found = 0
      if abbrev(key, word(keys,i))
      then found = i
    end i
    if found = 0
    then do
      say '010T Invalid parameter: 'opt
      return 16
      end
    /* Validate parameter value */
    if wordpos(val, vals.found) = 0
    then do
      say '011T Invalid parameter: 'key'('val')'
      return 16
      end
    call value word(keys,found), val
  end
  return 0

jcl: procedure expose step jcl.
  parse arg c
  select
  when step < 2 /* JOB cards, DELETE step */
  then i = step + 1
  when word(c, 1) = 'DELETE'
  then i = 2
  when c = '//'
  then i = 5
  when left(c, 2) = '//'
  then i = 3
  otherwise /* AMS statements */
    i = 4
  end
  j = jcl.i.0+1
  jcl.i.j = c
  jcl.i.0 = j
  return 0
